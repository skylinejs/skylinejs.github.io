<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://skylinejs.com/blog</id>
    <title>SkylineJS Blog</title>
    <updated>2023-10-19T09:17:52.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://skylinejs.com/blog"/>
    <subtitle>SkylineJS Blog</subtitle>
    <icon>https://skylinejs.com/logo/favicon-skyline.jpeg</icon>
    <entry>
        <title type="html"><![CDATA[On the Complexity Incentive Mismatch in Software Development]]></title>
        <id>https://skylinejs.com/blog/complexity-incentive-mismatch</id>
        <link href="https://skylinejs.com/blog/complexity-incentive-mismatch"/>
        <updated>2023-10-19T09:17:52.000Z</updated>
        <summary type="html"><![CDATA[Complexity bad, very bad. Every developer either quits the profession or works long enough to painfully learn this lesson. However, even if an experienced developer knows to avoid complexity like its the plague, it still might not be in their best interest to do so. This is bad news as it is already difficult enough to keep complexity out of large codebase with multiple contributors.]]></summary>
        <content type="html"><![CDATA[<p>Complexity bad, very bad. Every developer either quits the profession or works long enough to painfully learn this lesson. However, even if an experienced developer knows to avoid complexity like its the plague, it still might not be in their best interest to do so. This is bad news as it is already difficult enough to keep complexity out of large codebase with multiple contributors.</p><p>Meet Jeffry. Jeffry is a senior solution architect with stronlgy held opinions and an even stronger disliking of office politics. Jeffry gets parachuted into yet another development project that has the usual suspects: couple of junior devs, a scrum master, a compliance officer, a DevOps specialist and an MBA to keep it all together.</p><p>Jeffry has to make a choice: He can take on the challenge and pour his efforts into the project. He knows from the previous times around that he will have to patient with the junior devs, fight off their attempts to introduce Kubernetes, GraphhQL schema federation or GraphQL at all for that matter. He will have to sit through the daily stand up meetings and discuss whether to give 4 or 8 storypoints to a bug without even knowning how much time a storypoint represents. He will have to stop the compliance officer from making the signup process unusable and make the MBA look good in front of management and compliment his spreadsheets.</p><p>Jeffry knows in his heart that this is the right path. However, there is the right path and then there is the smart path. Let's look a Jeffry's goals that he wants to achieve at his workplace:</p><ul><li>Income security and a career path to increase his salary</li><li>Interesting technical challenges and the autonomy to solve them how he sees fit</li><li>Flexible working hours and holidays in order to fulfill his responsibilities outside work towards his family and friends</li></ul><p>Choosing the right path does not get Jeffry any closer to his goals. If he fights for a simple and elegant codebase, he only upsets the other developers as he has to disagree a lot and say "no" much more than "yes". Furthermore, a simple and well documented codebase is easy to understand and maintain. This is detrimental to Jeffry's career goals as he makes himself easily replaceable. Management can just assign another developer to the project as Jeffry's knowledge is not only in his head but accessible via the documentation and by reading the code. Jeffry would create much more leverage for himself by creating a complex codebase that only he knows how to evolve and maintain. He can use this leverage when negotiating his salary, working hours and so on.</p><p>The best part is that Jeffry does not even need malicious or selfish intent to create a messy codebase and therefore the necessary leverage for himself. It is simply the default outcome of a development project if nobody stands up and fights it on a daily basis.</p><p>The incentive structure unfortunately does not get better for the other participants. Let's take the compliance officer: His job is to make sure that data protection laws, GDPR and all the other regulations are met. From a project perspective, fulfilling each compliance rule word by word is not productive as it would kill the primary objective of the project by making the application unusable. In the end, the most compliant software is the one that has no users. This tradeoff does not exist for the compliance officer. His work only gets measured by how many compliance violations occur on his watch. There is simply no incentive to find a middle ground as he can only loose but has nothing to gain.</p><p>Hopefully this example demonstrates an inevitable truth: You cannot ignore office politics, incentive and governance structures. No matter how many technical challenges you solve, the project is destined to fail if you don't get the incentives right. It is the foundation that is necessary to do any of the "real" work.</p>]]></content>
        <author>
            <name>William WET</name>
        </author>
        <category label="software development" term="software development"/>
        <category label="philosophy" term="philosophy"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Best of TypeScript compiler options]]></title>
        <id>https://skylinejs.com/blog/best-of-typescript-compiler-options</id>
        <link href="https://skylinejs.com/blog/best-of-typescript-compiler-options"/>
        <updated>2023-10-18T17:31:31.000Z</updated>
        <summary type="html"><![CDATA[Let's have a look at the the TypeScript compiler options you can set inside your tsconfig.json. While workspace management tools such as Nx free us developers from setting up the TypeScript toolchain (which can be a real time sink), it is still worth it to go through the multitude of compiler options to get the most out of your tooling. However, there are a crapton of options and turning on everything might feel good in the moment but will only get you a bunch of // @ts-ignore and snarky comments from your teammates That's why the SkylineJS team assembled the most valuable compiler options in this blog post. Each option has proven over many years to increase code quality and developer productivity while not getting in the way or forcing certain patterns on the developer that have no tangible benefits.]]></summary>
        <content type="html"><![CDATA[<p>Let's have a look at the the TypeScript compiler options you can set inside your <code>tsconfig.json</code>. While workspace management tools such as Nx free us developers from setting up the TypeScript toolchain (which can be a real time sink), it is still worth it to go through the multitude of compiler options to get the most out of your tooling. However, there are a crapton of options and turning on <em>everything</em> might feel good in the moment but will only get you a bunch of <code>// @ts-ignore</code> and snarky comments from your teammates ðŸ˜‰ That's why the SkylineJS team assembled the most valuable compiler options in this blog post. Each option has proven over many years to increase code quality and developer productivity while not getting in the way or forcing certain patterns on the developer that have no tangible benefits.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="motivation">Motivation<a href="#motivation" class="hash-link" aria-label="Direct link to Motivation" title="Direct link to Motivation">â€‹</a></h2><br><br><p>While TypeScript can ensure that no runtime errors happen when passing data between the type-safe components of your application, the data might still have an "unsafe" origin. An example for an origin that cannot be validated by the TypeScript compiler is the result of an SQL query. While you can specify an interface for the result data, the SQL query might still return totally different data at runtime. This can lead to issues that are difficult to debug, so we should fix the root cause by validating that the result of the SQL query machtes the TypeScript interface. We can accomplish this by using JSON schema validation without introducing any real performance penalty (e.g., by using the <code>ajv</code> library). The same approach can and should be taken for all other unsafe sources of runtime values such as environment variables or HTTP requests.</p><p>I call this approach "end-to-end type safety". If you can rely on the runtime values to match their TypeScript interface - because you validate them when they enter your application boundary - and your application ensures the correct accessing and passing of such values using TypeScript, you pretty much eliminate all runtime errors. Of course there are always edge-cases that slip through, but you should be able to reduce the time you spend inside a debugger by 90+ percent.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="compiler-options-that-are-worth-your-time">Compiler options that are worth your time<a href="#compiler-options-that-are-worth-your-time" class="hash-link" aria-label="Direct link to Compiler options that are worth your time" title="Direct link to Compiler options that are worth your time">â€‹</a></h2><p>These compiler options are pretty cool and should be used in every TypeScript project! They are ordered by most to least important. You can check out the complete list of options here: <a href="https://www.typescriptlang.org/tsconfig" target="_blank" rel="noopener noreferrer">https://www.typescriptlang.org/tsconfig</a></p><p>Here is a summary of all options that are discussed in detail below. Note that the <code>strict</code> option is a convenient shortcut to activate all of the strict type checking options:</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  </span><span class="token property">"strict"</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  </span><span class="token property">"noImplicitReturns"</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  </span><span class="token property">"noFallthroughCasesInSwitch"</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="strictnullchecks"><code>strictNullChecks</code><a href="#strictnullchecks" class="hash-link" aria-label="Direct link to strictnullchecks" title="Direct link to strictnullchecks">â€‹</a></h3><p>Strict null checks are not merely a convenient way to reduce the number of <code>cannot read property of undefined</code> errors, they are a way of living!<!-- --> Developers with <code>strictNullChecks</code> enabled have a certain spring in their step, they ooze with confidence and are generally more enlightened. A study shows that 42% of developers report an immediate increase in happiness in their work and personal life after activating <code>strictNullChecks</code> at the beginning of a new project.</p><p>On a more serious note, <code>strictNullChecks</code> indeed change the way you design your application interfaces. Firstly, it enhances code robustness by preventing common runtime errors related to null and undefined values. This strict mode forces developers to explicitly handle potentially nullable variables, reducing the likelihood of 'null reference' or 'undefined is not a function' errors. Secondly, it improves code clarity and maintainability by making it clear which variables can have nullable values, encouraging more precise type annotations and safer programming practices. This leads to better self-documentation of the code and aids in collaboration among team members. Additionally, <code>strictNullChecks</code> helps catch potential issues during development rather than in the runtime, which can save time and effort in debugging and testing phases.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="noimplicitreturns"><code>noImplicitReturns</code><a href="#noimplicitreturns" class="hash-link" aria-label="Direct link to noimplicitreturns" title="Direct link to noimplicitreturns">â€‹</a></h3><p>This feature ensures that all code paths within a function return a value, effectively eliminating the risk of unintentional undefined returns. By enforcing explicit return statements in all branches, it promotes comprehensive error handling and clearer code logic. This not only prevents potential runtime errors but also makes code more understandable and maintainable. Developers are prompted to think critically about all possible scenarios, leading to more robust and predictable functions. The "noImplicitReturns" option enhances the safety and maintainability of TypeScript code, making it a valuable tool for writing cleaner and more dependable software.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="nofallthroughcasesinswitch"><code>noFallthroughCasesInSwitch</code><a href="#nofallthroughcasesinswitch" class="hash-link" aria-label="Direct link to nofallthroughcasesinswitch" title="Direct link to nofallthroughcasesinswitch">â€‹</a></h3><p>This feature ensures that each case in a switch statement must end with a 'break' or a 'return' statement, preventing unintended fallthrough behavior. This enhancement enforces a more structured and intentional coding style, reducing the likelihood of hard-to-trace bugs caused by accidental fallthrough. It promotes better code organization and readability by making the developer's intentions explicit, leading to more maintainable and comprehensible code. The "noFallthroughCasesInSwitch" option significantly improves code quality and minimizes potential sources of errors, making it an excellent choice for projects where robustness and maintainability are top priorities.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="noimplicitany"><code>noImplicitAny</code><a href="#noimplicitany" class="hash-link" aria-label="Direct link to noimplicitany" title="Direct link to noimplicitany">â€‹</a></h3><p>Enabling the "noImplicitAny" option in the TypeScript compiler offers significant advantages in terms of code safety and maintainability. This feature ensures that all variables have explicit type annotations, eliminating the common "any" type, which represents an absence of type information. By doing so, it forces developers to provide clear and specific type declarations, reducing the chances of runtime errors caused by type ambiguity. This option promotes a stronger and more predictable type system, which leads to better code documentation, improved collaboration among team members, and enhanced code readability. Furthermore, by explicitly specifying types, "noImplicitAny" aids in catching type-related issues during development, enabling developers to identify and address potential problems before they manifest as runtime errors. In essence, this option encourages a safer and more maintainable TypeScript codebase, making it a valuable choice for projects seeking to maximize code quality and minimize unexpected errors.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="useunknownincatchvariables"><code>useUnknownInCatchVariables</code><a href="#useunknownincatchvariables" class="hash-link" aria-label="Direct link to useunknownincatchvariables" title="Direct link to useunknownincatchvariables">â€‹</a></h3><p>This option is a fairly recent addition to the TypeScript compiler (added in 4.0). It addresses the issue that you can throw <em>anything</em> in JavaScript, so you do not know if you catched an instance of the Error class or something else. Before this option, you would have to enforce the <code>unknown</code> type via a linting rule, as errors have the <code>any</code> type by default.</p><p>The unknown type provides a safer and more flexible way to handle exceptions, as it forces developers to make explicit type assertions when accessing properties or calling methods on the caught exception. This encourages better error handling practices, reduces the risk of runtime errors, and enhances code reliability by ensuring that only well-defined operations are performed on exception objects.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="compiler-options-that-are-not-worth-your-time">Compiler options that are not worth your time<a href="#compiler-options-that-are-not-worth-your-time" class="hash-link" aria-label="Direct link to Compiler options that are not worth your time" title="Direct link to Compiler options that are not worth your time">â€‹</a></h2><p>These compiler options sound useful when you first encounter them but have proven to be more of a burden during development. They might be suitable for certain kinds of projects and development practices, so its more of a recommendation than a hard rule.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="nounusedlocals"><code>noUnusedLocals</code><a href="#nounusedlocals" class="hash-link" aria-label="Direct link to nounusedlocals" title="Direct link to nounusedlocals">â€‹</a></h3><p>The "noUnusedLocals" option in the TypeScript compiler is designed to help identify and eliminate unused local variables within your code. While this is generally beneficial for code cleanliness and performance, it can be seen as cumbersome for developers for the following reasons:</p><ol><li><p>Testing and experimentation: During development and debugging, developers may temporarily add variables for testing, debugging, or experimentation purposes. Forgetting to remove these variables promptly might trigger warnings, potentially adding unnecessary overhead to the development process.</p></li><li><p>Code refactoring: Enforcing this option might require developers to spend time and effort refactoring their code to remove unused variables. This can be particularly challenging in large codebases, and it may introduce a risk of unintentional code changes and regressions.</p></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">â€‹</a></h2><p>The TypeScript compiler is a mighty tool that helps you to write clean, structured code and greatly reduces the number of runtime errors. Type-safety always pays off for larger codebases that need to be evolved and maintain over many years to come. And always remember: an interface a day keeps the middle-of-the-night-production-hotfix-sessions away.</p>]]></content>
        <author>
            <name>Typesafe Lucy</name>
        </author>
        <category label="typescript" term="typescript"/>
        <category label="tooling" term="tooling"/>
    </entry>
</feed>