"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[996],{3905:(e,n,r)=>{r.d(n,{Zo:()=>m,kt:()=>v});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=t.createContext({}),u=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},m=function(e){var n=u(e.components);return t.createElement(l.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=u(r),f=i,v=p["".concat(l,".").concat(f)]||p[f]||c[f]||a;return r?t.createElement(v,o(o({ref:n},m),{},{components:r})):t.createElement(v,o({ref:n},m))}));function v(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},4813:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var t=r(7462),i=(r(7294),r(3905));const a={sidebar_position:1,label:"env",slug:"env"},o="@skyline-js/env",s={unversionedId:"api-reference/env",id:"api-reference/env",title:"@skyline-js/env",description:"This is the API reference for the @skyline-js/env package.",source:"@site/docs/api-reference/env.md",sourceDirName:"api-reference",slug:"/api-reference/env",permalink:"/docs/api-reference/env",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,label:"env",slug:"env"},sidebar:"tutorialSidebar",previous:{title:"API Reference",permalink:"/docs/category/api-reference"},next:{title:"@skyline-js/cache",permalink:"/docs/api-reference/cache"}},l={},u=[{value:"SkylineEnv",id:"skylineenv",level:2},{value:"Interfaces",id:"interfaces",level:2},{value:"EnvConfiguration",id:"envconfiguration",level:3}],m={toc:u},p="wrapper";function c(e){let{components:n,...r}=e;return(0,i.kt)(p,(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"skyline-jsenv"},(0,i.kt)("inlineCode",{parentName:"h1"},"@skyline-js/env")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This is the API reference for the ",(0,i.kt)("inlineCode",{parentName:"p"},"@skyline-js/env")," package. ",(0,i.kt)("br",null),"\nThe guiding principles of the Skyline environment approach can be found here: ",(0,i.kt)("a",{parentName:"p",href:"/docs/environment"},"Environment Primer"),".")),(0,i.kt)("h2",{id:"skylineenv"},"SkylineEnv"),(0,i.kt)("p",null,"Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @skyline-js/env\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { SkylineEnv } from '@skyline-js/env';\n\nconst env = new SkylineEnv();\n")),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"interfaces"},"Interfaces"),(0,i.kt)("h3",{id:"envconfiguration"},"EnvConfiguration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'path="packages/env/src/lib/env-configuration.interface.ts" skipLines="2" remove="export "',path:'"packages/env/src/lib/env-configuration.interface.ts"',skipLines:'"2"',remove:'"export','"':!0},"interface EnvConfiguration<\n  RuntimeEnvironment extends { [key: string]: string } = {}\n> {\n  // === Logging ===\n\n  /** Whether to enable logging. */\n  debug: boolean;\n\n  /** The log levels that are enabled. */\n  logLevels: EnvLogLevel[];\n\n  // ===  Runtime environment ===\n  /** The runtime of your application */\n  runtime?: RuntimeEnvironment[keyof RuntimeEnvironment] | string;\n\n  /** The possible runtimes of your application.\n   * Provide this option if you want to validate that the runtime is one of the provided runtimes.\n   */\n  runtimes?: RuntimeEnvironment;\n\n  /** The process environment (probably only useful for testing).\n   * Provide this option if you want to use a custom process environment.\n   * @default process.env\n   */\n  processEnv: NodeJS.ProcessEnv;\n\n  /** Whether to throw an error if the runtime is missing.\n   * Provide this option if you want to throw an error if the runtime is missing.\n   * @default false\n   */\n  throwOnMissingRuntime: boolean;\n\n  // ===  Variable name ===\n  /**\n   * The prefix of your environment variables.\n   * Provide this option if you want to validate that the environment variable name starts with the provided prefix.\n   */\n  variableNamePrefix: string;\n\n  /**\n   * Whether to ignore the casing of your environment variable names.\n   * @default false\n   */\n  variableNameIgnoreCasing: boolean;\n\n  // ===  Variable value ===\n  /**\n   * Whether to trim the value of your environment variables.\n   * @default false\n   */\n  valueTrim: boolean;\n\n  /**\n   * The encoding of your environment variables.\n   * Provide this option if you want to decode the value of your environment variables.\n   * Possible values are 'base64', 'base64url', 'hex' and 'url'.\n   */\n  valueEncoding?: ValueEncodingType;\n\n  /**\n   * Whether to remove the value of your environment variables after parsing.\n   * Provide this option if you want to remove the value of your environment variables after parsing.\n   * This can improve the security of your application.\n   * @default false\n   */\n  valueRemoveAfterParse: boolean;\n\n  // === Boolean parsing ===\n  /**\n   * The values (strings) that are considered as true.\n   * @default true, 1, yes, y, on, enabled, enable, ok, okay\n   */\n  booleanTrueValues: string[];\n\n  /**\n   * The values (strings) that are considered as false.\n   * @default false, 0, no, n, off, disabled, disable\n   */\n  booleanFalseValues: string[];\n\n  // === String parsing ===\n  /**\n   * The minimum length of the string.\n   */\n  stringMinLength?: number;\n\n  /**\n   * The maximum length of the string.\n   */\n  stringMaxLength?: number;\n\n  /**\n   * The pattern of the string.\n   */\n  stringPattern?: RegExp | string;\n\n  // === Enum parsing ===\n  /**\n   * Whether to ignore the casing of the enum values.\n   */\n  enumIgnoreCasing: boolean;\n\n  // === Number parsing ===\n  /**\n   * The minimum value of the number.\n   */\n  numberMinimum?: number;\n\n  /**\n   * The maximum value of the number.\n   */\n  numberMaximum?: number;\n\n  /**\n   * Whether the number must be an integer.\n   */\n  numberIsInteger: boolean;\n\n  /**\n   * The minimum value of the number (exclusive).\n   */\n  numberExclusiveMinimum?: number;\n\n  /**\n   * The maximum value of the number (exclusive).\n   */\n  numberExclusiveMaximum?: number;\n\n  // === JSON parsing ===\n  /**\n   * The required properties of the JSON object.\n   */\n  jsonRequired: string[];\n\n  /**\n   * The minimum number of properties of the JSON object.\n   */\n  jsonMinProperties?: number;\n\n  /**\n   * The maximum number of properties of the JSON object.\n   */\n  jsonMaxProperties?: number;\n\n  /**\n   * Whether to allow additional properties of the JSON object.\n   */\n  jsonAdditionalProperties: boolean;\n\n  // === Array parsing ===\n  /**\n   * The separator of the array.\n   * @default ,\n   */\n  arraySeparator: string;\n\n  /**\n   * The minimum length of the array.\n   */\n  arrayMinLength?: number;\n\n  /**\n   * The maximum length of the array.\n   */\n  arrayMaxLength?: number;\n\n  /**\n   * Whether to ensure that the array has unique items.\n   * @default false\n   */\n  arrayUniqueItems: boolean;\n}\n")))}c.isMDXComponent=!0}}]);